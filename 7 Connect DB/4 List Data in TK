# สร้าง emplyee.py
import sqlite3

# เชื่อมต่อกับฐานข้อมูล (หรือสร้างใหม่ถ้าไม่มี)
conn = sqlite3.connect('employee.db')
cursor = conn.cursor()

# สร้างตาราง
cursor.execute('''CREATE TABLE IF NOT EXISTS employees (
                    id INTEGER PRIMARY KEY,
                    name TEXT,
                    position TEXT,
                    salary REAL,
                    phone TEXT
                  )''')

# เพิ่มข้อมูลตัวอย่าง
cursor.execute('''INSERT INTO employees (name, position, salary, phone)
                  VALUES ('John Doe', 'Manager', 50000, '123-456-7890')''')
cursor.execute('''INSERT INTO employees (name, position, salary, phone)
                  VALUES ('Jane Smith', 'Developer', 60000, '234-567-8901')''')
cursor.execute('''INSERT INTO employees (name, position, salary, phone)
                  VALUES ('Emily Johnson', 'Designer', 45000, '345-678-9012')''')

# บันทึกการเปลี่ยนแปลง
conn.commit()
conn.close()

============================================================================

ขั้นตอนการดึงข้อมูลและแสดงใน Tkinter

import sqlite3
import tkinter as tk
from tkinter import ttk

# ฟังก์ชันสำหรับดึงข้อมูลจากฐานข้อมูล
def fetch_data():
    conn = sqlite3.connect('employee.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, position, salary, phone FROM employees')
    rows = cursor.fetchall()
    conn.close()
    return rows

# ฟังก์ชันสำหรับแสดงข้อมูลใน Tkinter Treeview
def display_data(tree):
    rows = fetch_data()
    for row in rows:
        tree.insert('', tk.END, values=row)

# สร้างหน้าต่าง Tkinter
root = tk.Tk()
root.title("Employee Information")

# สร้าง Treeview
tree = ttk.Treeview(root, columns=('name', 'position', 'salary', 'phone'), show='headings')
tree.heading('name', text='Name')
tree.heading('position', text='Position')
tree.heading('salary', text='Salary')
tree.heading('phone', text='Phone')
tree.pack(fill=tk.BOTH, expand=True)

# เรียกใช้ฟังก์ชันแสดงข้อมูล
display_data(tree)

# เริ่มต้น main loop ของ Tkinter
root.mainloop()
