#ฟังก์ชันที่ส่งค่ากลับ (Returning Functions)
#ฟังก์ชันเหล่านี้จะทำการคำนวณหรือประมวลผลอะไรบางอย่างและส่งผลลัพธ์กลับไปยังจุดที่มีการเรียกใช้ฟังก์ชันนั้น ๆ คำสั่ง return ในฟังก์ชันจะสิ้นสุดการทำงานของฟังก์ชันและส่งค่ากลับไปยังผู้เรียก

def calculate_area(radius):
    area = 3.14 * radius ** 2
    return area

# เรียกใช้ฟังก์ชันและพิมพ์ผลลัพธ์
result = calculate_area(5)
print("Area of the circle:", result)

#ฟังก์ชันที่ไม่ส่งค่ากลับ (Non-Returning Functions)
#ฟังก์ชันเหล่านี้ทำงานและไม่ส่งค่าใดๆ กลับไป ฟังก์ชันประเภทนี้มักใช้เพื่อทำการกระทำที่ไม่ต้องการค่าผลลัพธ์เช่น การพิมพ์ข้อความหรือการอัปเดตข้อมูล

def greet(name):
    print(f"Hello, {name}! How are you?")

# เรียกใช้ฟังก์ชัน
greet("Alice")

#ฟังก์ชันประเภทที่สองนี้ไม่มีคำสั่ง return หรืออาจมีคำสั่ง return โดยไม่ระบุค่าใดๆ ซึ่งในกรณีนั้นจะคืนค่า None ไปยังผู้เรียกโดยอัตโนมัติ:

def do_nothing():
    pass
    
result = do_nothing()
print(result)  # จะพิมพ์ 'None' เพราะฟังก์ชันไม่มีคำสั่ง return ที่ระบุค่า


#พารามิเตอร์ (Parameters)
#พารามิเตอร์คือตัวแปรที่กำหนดในการประกาศฟังก์ชั่น ซึ่งใช้สำหรับรับค่าที่จะถูกส่งเข้ามาเมื่อฟังก์ชั่นนั้นถูกเรียกใช้งาน พารามิเตอร์อยู่ในวงเล็บหลังชื่อฟังก์ชั่นและทำหน้าที่เป็นตัวแปรภายในฟังก์ชั่นนั้นๆ


def print_name(first_name, last_name):  # first_name และ last_name เป็นพารามิเตอร์
    full_name = first_name + " " + last_name
    print(full_name)

#อาร์กิวเมนต์ (Arguments)
#อาร์กิวเมนต์คือค่าจริงที่ส่งไปยังฟังก์ชั่นเมื่อมีการเรียกใช้งานฟังก์ชั่นนั้น อาร์กิวเมนต์จะถูกส่งผ่านไปยังพารามิเตอร์ของฟังก์ชั่น ตรงกับตำแหน่งหรือชื่อของพารามิเตอร์นั้นๆ


print_name("Alice", "Johnson")  # "Alice" และ "Johnson" เป็นอาร์กิวเมนต์

#ประเภทของอาร์กิวเมนต์
#Positional Arguments - ค่าที่ส่งไปยังฟังก์ชั่นตามตำแหน่งของพารามิเตอร์
#Keyword Arguments - ค่าที่ส่งไปยังฟังก์ชั่นโดยระบุชื่อพารามิเตอร์ ช่วยให้สามารถส่งค่าไปยังฟังก์ชั่นโดยไม่ต้องสนใจลำดับของพารามิเตอร์
#Default Parameters - กำหนดค่าเริ่มต้นให้กับพารามิเตอร์ในฟังก์ชั่น หากไม่มีอาร์กิวเมนต์ถูกส่งมาเมื่อเรียกใช้ฟังก์ชั่น พารามิเตอร์จะใช้ค่าเริ่มต้นนี้

#ตัวแปร Global (โกลบอล)
#ตัวแปร global คือตัวแปรที่ถูกกำหนดนอกฟังก์ชั่นใดๆ และสามารถเข้าถึงได้จากทุกส่วนในโปรแกรม ซึ่งรวมถึงภายในฟังก์ชั่นต่างๆ ด้วย ตัวแปร global มีชีวิตอยู่ตลอดการทำงานของโปรแกรมและสามารถเปลี่ยนแปลงค่าจากฟังก์ชั่นใดๆ ในโปรแกรม

x = "global"

def function():
    print("Inside function:", x)

function()
print("Outside function:", x)

#ตัวแปร Local (โลคอล)
#ตัวแปร local คือตัวแปรที่ถูกกำหนดภายในฟังก์ชั่นและสามารถเข้าถึงได้เฉพาะภายในฟังก์ชั่นนั้นๆ เท่านั้น ขอบเขตของตัวแปร local จำกัดอยู่ภายในฟังก์ชั่นที่มันถูกสร้างขึ้น ซึ่งหมายความว่าไม่สามารถเข้าถึงหรือเปลี่ยนแปลงค่าของตัวแปรนี้ได้จากฟังก์ชั่นอื่น

def function():
    y = "local"
    print("Inside function:", y)

function()

try:
    print("Outside function:", y)
except NameError as e:
    print(e)  # จะพิมพ์ข้อความแสดงว่าตัวแปร y ไม่ได้ถูกกำหนด

#การใช้ตัวแปร Global ในฟังก์ชั่น
#หากต้องการเปลี่ยนแปลงค่าของตัวแปร global ภายในฟังก์ชั่น คุณต้องใช้คำสั่ง global เพื่อระบุว่าคุณกำลังอ้างอิงถึงตัวแปร global และไม่ใช่การสร้างตัวแปร local ใหม่

z = "global"

def function():
    global z
    z = "modified by function"
    print("Inside function:", z)

function()
print("Outside function:", z)  # จะพิมพ์ "modified by function"


#การสร้างโมดูล
#โมดูลใดๆ ก็ตามเริ่มต้นจากการสร้างไฟล์ Python ปกติ ตัวอย่างเช่น, คุณสามารถสร้างไฟล์ที่ชื่อว่า my_module.py และเขียนโค้ดตามต้องการในไฟล์นั้น:


# my_module.py
def greet(name):
    print(f"Hello, {name}!")

def add(a, b):
    return a + b

#การนำเข้าโมดูล
#หลังจากสร้างโมดูลแล้ว คุณสามารถนำเข้าโมดูลนั้นในโปรแกรม Python อื่นได้โดยใช้คำสั่ง import:


# main_program.py
import my_module

my_module.greet("Alice")
result = my_module.add(5, 3)
print(result)

#การนำเข้าฟังก์ชัน, คลาส, หรือตัวแปรเฉพาะจากโมดูล
#คุณสามารถเลือกนำเข้าเฉพาะส่วนที่ต้องการจากโมดูล ไม่ว่าจะเป็นฟังก์ชัน, คลาส, หรือตัวแปรโดยใช้ from ... import ...:

from my_module import greet, add

greet("Bob")
print(add(10, 20))

#การนำเข้าโมดูลด้วยชื่อเล่น
#หากชื่อโมดูลยาวหรือคุณต้องการใช้ชื่อที่สั้นกว่า, คุณสามารถใช้ as เพื่อกำหนดชื่อเล่น (alias) ให้กับโมดูลหรือฟังก์ชัน:

import my_module as mm

mm.greet("Carol")

#โมดูลมาตรฐาน
#Python มีห้องสมุดมาตรฐาน (standard library) ที่มีโมดูลมากมายซึ่งสามารถนำมาใช้ได้ทันที ไม่ว่าจะเป็นการจัดการไฟล์, การจัดการเวลา, คณิตศาสตร์, ฯลฯ:

import math
import datetime
import os
