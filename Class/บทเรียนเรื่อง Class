การสร้างและการใช้งานคลาสใน Python
1. การสร้างคลาสพื้นฐาน
คลาสใน Python คือการรวมกลุ่มของตัวแปรและฟังก์ชันไว้ด้วยกันภายใต้ชื่อเดียว ซึ่งช่วยให้การจัดการและการนำกลับมาใช้ซ้ำทำได้ง่ายขึ้น

============================================================================================================
class Person:
    # เมธอด __init__ จะถูกเรียกใช้เมื่อมีการสร้างออบเจ็กต์จากคลาสนี้
    def __init__(self, name, age):
        self.name = name  # กำหนดค่าชื่อ
        self.age = age    # กำหนดค่าอายุ

    # เมธอดแสดงข้อมูล
    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}")

# การสร้างออบเจ็กต์จากคลาส
person1 = Person("Alice", 30)
person2 = Person("Bob", 25)

# การเรียกใช้เมธอดของออบเจ็กต์
person1.display_info()  # Output: Name: Alice, Age: 30
person2.display_info()  # Output: Name: Bob, Age: 25

============================================================================================================
ส่วนประกอบของคลาส
ตัวแปรของคลาส (Class Variables):
ตัวแปรที่ใช้ร่วมกันระหว่างออบเจ็กต์ทั้งหมดของคลาส

ตัวแปรของออบเจ็กต์ (Instance Variables):
ตัวแปรที่เป็นของแต่ละออบเจ็กต์

เมธอดของคลาส (Class Methods):
ฟังก์ชันที่สามารถเรียกใช้ได้จากคลาสโดยตรง

เมธอดของออบเจ็กต์ (Instance Methods):
ฟังก์ชันที่สามารถเรียกใช้ได้จากออบเจ็กต์ของคลาส

============================================================================================================
class Employee:
    # ตัวแปรของคลาส
    num_of_employees = 0
    raise_amount = 1.04

    # เมธอด __init__ จะถูกเรียกใช้เมื่อมีการสร้างออบเจ็กต์จากคลาสนี้
    def __init__(self, first, last, pay):
        self.first = first    # ชื่อตัว
        self.last = last      # นามสกุล
        self.pay = pay        # เงินเดือน
        self.email = f"{first.lower()}.{last.lower()}@company.com"
        
        # เพิ่มจำนวนพนักงานเมื่อมีการสร้างออบเจ็กต์ใหม่
        Employee.num_of_employees += 1

    # เมธอดแสดงข้อมูลพนักงาน
    def fullname(self):
        return f"{self.first} {self.last}"

    # เมธอดเพิ่มเงินเดือน
    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amount)

# การสร้างออบเจ็กต์จากคลาส
emp1 = Employee("John", "Doe", 50000)
emp2 = Employee("Jane", "Smith", 60000)

# การเรียกใช้เมธอดของออบเจ็กต์
print(emp1.fullname())  # Output: John Doe
print(emp2.fullname())  # Output: Jane Smith

# การเพิ่มเงินเดือน
emp1.apply_raise()
print(emp1.pay)  # Output: 52000

# การเข้าถึงตัวแปรของคลาส
print(Employee.num_of_employees)  # Output: 2

============================================================================================================
การสืบทอดคลาส (Inheritance)
การสืบทอดเป็นการสร้างคลาสใหม่ที่มีคุณสมบัติของคลาสที่มีอยู่แล้ว โดยคลาสใหม่สามารถเพิ่มคุณสมบัติหรือเปลี่ยนแปลงคุณสมบัติของคลาสที่สืบทอดมาได้

============================================================================================================
class Developer(Employee):
    raise_amount = 1.10  # เปลี่ยนแปลงตัวแปรของคลาส

    def __init__(self, first, last, pay, prog_lang):
        super().__init__(first, last, pay)  # เรียกใช้ตัวสร้างของคลาสพ่อแม่
        self.prog_lang = prog_lang          # เพิ่มตัวแปรใหม่

# การสร้างออบเจ็กต์จากคลาสที่สืบทอด
dev1 = Developer("Alice", "Brown", 70000, "Python")
dev2 = Developer("Bob", "Davis", 80000, "JavaScript")

# การเรียกใช้เมธอดของออบเจ็กต์
print(dev1.fullname())  # Output: Alice Brown
print(dev1.prog_lang)   # Output: Python

# การเพิ่มเงินเดือน
dev1.apply_raise()
print(dev1.pay)  # Output: 77000 (เพิ่มขึ้น 10%)
============================================================================================================
  
สรุป
คลาส: โครงสร้างที่รวมกลุ่มตัวแปรและฟังก์ชันไว้ด้วยกัน
ออบเจ็กต์: อินสแตนซ์ของคลาส
ตัวแปรของคลาส: ตัวแปรที่ใช้ร่วมกันระหว่างออบเจ็กต์ทั้งหมด
ตัวแปรของออบเจ็กต์: ตัวแปรที่เป็นของแต่ละออบเจ็กต์
เมธอดของคลาส: ฟังก์ชันที่สามารถเรียกใช้ได้จากคลาสโดยตรง
เมธอดของออบเจ็กต์: ฟังก์ชันที่สามารถเรียกใช้ได้จากออบเจ็กต์
การสืบทอด: การสร้างคลาสใหม่ที่มีคุณสมบัติของคลาสที่มีอยู่แล้ว
